// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  passwordHash      String?
  role              Role      @default(USER)
  isSubscribed      Boolean   @default(false)
  trustScore        Int       @default(0)
  profileCompletion Int       @default(0)
  verifiedFields    Json      @default("{}")
  companyName       String?
  tradeCategory     String?
  description       String?
  insuranceDoc      String?
  qualifications   String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  jobs      Job[]
  quotes    Quote[]
  subscription Subscription?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Job {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  category    String
  location    String
  budget      Float?
  averageQuote Float?
  status      JobStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotes Quote[]
}

model Quote {
  id        String      @id @default(cuid())
  jobId     String
  proId     String
  amount    Float
  comment   String?
  status    QuoteStatus @default(ABOUT_RIGHT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  job Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  pro User @relation(fields: [proId], references: [id], onDelete: Cascade)

  @@unique([jobId, proId])
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  stripeCustomerId     String   @unique
  stripeSubscriptionId String   @unique
  status               String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  PRO
  ADMIN
}

enum JobStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum QuoteStatus {
  LOWER
  ABOUT_RIGHT
  HIGHER
}